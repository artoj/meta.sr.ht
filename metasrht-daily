#!/usr/bin/env python3
from srht.config import cfg
from srht.database import DbSession
db = DbSession(cfg("meta.sr.ht", "connection-string"))
from metasrht.types import User, UserType, PaymentInterval
db.init()

import sys
from metasrht.audit import expire_audit_logs
from metasrht.email import send_email
from datetime import datetime, timedelta

print("Running daily cron")
print("Expiring old audit log entires")
expire_audit_logs()

if cfg("meta.sr.ht::billing", "enabled") == "yes":
    print("Running billing")
    from metasrht.billing import charge_user, ChargeResult
    users = (User.query
        .filter(User.payment_cents != 0)
        .filter(User.payment_due < datetime.utcnow())
    ).all()
    ncharges = 0
    for user in users:
        print(f"Billing ~{user.username} ({ncharges+1}/{len(users)})")
        result, error = charge_user(user)
        db.session.commit()
        encrypt_key = None
        if user.pgp_key:
            encrypt_key = user.pgp_key.key
        if result == ChargeResult.failed:
            send_email("payment-failed", user.email,
                    f"Your payment to {cfg('sr.ht', 'site-name')} was not processed successfully",
                    headers={
                        "From": f"{cfg('sr.ht', 'smtp-from')}",
                        "To": "{} <{}>".format(user.username ,user.email),
                        "Reply-To": f"{cfg('sr.ht', 'owner-name')} <{cfg('sr.ht', 'owner-email')}>",
                    },
                    encrypt_key=encrypt_key, user=user, reason=error)
        elif result == ChargeResult.success:
            amount = user.payment_cents
            if user.payment_interval == PaymentInterval.yearly:
                amount = amount * 10 # Apply yearly discount
            send_email("payment-success", user.email,
                    f"Your payment to {cfg('sr.ht', 'site-name')} was processed successfully",
                    headers={
                        "From": f"{cfg('sr.ht', 'smtp-from')}",
                        "To": "{} <{}>".format(user.username ,user.email),
                        "Reply-To": f"{cfg('sr.ht', 'owner-name')} <{cfg('sr.ht', 'owner-email')}>",
                    },
                    encrypt_key=encrypt_key, user=user,
                    amount="${:.2f}".format(amount / 100),
                    interval=user.payment_interval.value)
        ncharges += 1

print("Sending welcome emails")
users = (User.query
        .filter(User.welcome_emails == 0)
        .filter(User.user_type != UserType.unconfirmed)
        .filter(User.created < datetime.utcnow() + timedelta(days=-1))
    ).all()
nsent = 0
for user in users:
    encrypt_key = None
    if user.pgp_key:
        encrypt_key = user.pgp_key.key
    print(f"Sending to ~{user.username} ({nsent + 1}/{len(users)})")
    try:
        send_email("welcome", user.email, f"Welcome to {cfg('sr.ht', 'site-name')}!",
                headers={
                    "From": f"{cfg('sr.ht', 'smtp-from')}",
                    "To": "{} <{}>".format(user.username ,user.email),
                    "Reply-To": f"{cfg('sr.ht', 'owner-name')} <{cfg('sr.ht', 'owner-email')}>",
                },
                encrypt_key=encrypt_key,
                user=user)
    except:
        print("Failed!")
    user.welcome_emails += 1
    db.session.commit()
    nsent += 1

print("Sending please subscribe emails")
users = (User.query
        .filter(User.welcome_emails == 1)
        .filter(User.user_type == UserType.active_non_paying)
        .filter(User.created < datetime.utcnow() + timedelta(days=-14))
    ).all()
nsent = 0
for user in users:
    encrypt_key = None
    if user.pgp_key:
        encrypt_key = user.pgp_key.key
    print(f"Sending to ~{user.username} ({nsent + 1}/{len(users)})")
    try:
        send_email("pls-pay", user.email,
                f"Following up on your new {cfg('sr.ht', 'site-name')} account",
                headers={
                    "From": f"{cfg('sr.ht', 'smtp-from')}",
                    "To": "{} <{}>".format(user.username ,user.email),
                    "Reply-To": f"{cfg('sr.ht', 'owner-name')} <{cfg('sr.ht', 'owner-email')}>",
                },
                encrypt_key=encrypt_key,
                user=user)
    except:
        print("Failed!")
    user.welcome_emails += 1
    db.session.commit()
    nsent += 1
