// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"git.sr.ht/~sircmpwn/gql.sr.ht/model"
)

type Entity interface {
	IsEntity()
}

type WebhookDelivery interface {
	IsWebhookDelivery()
}

type WebhookPayload interface {
	IsWebhookPayload()
}

type AuditLogCursor struct {
	Results []*AuditLogEntry `json:"results"`
	Cursor  *model.Cursor    `json:"cursor"`
}

type HTTPHeader struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type InvoiceCursor struct {
	Results []*Invoice    `json:"results"`
	Cursor  *model.Cursor `json:"cursor"`
}

type PGPKeyCursor struct {
	Results []*PGPKey     `json:"results"`
	Cursor  *model.Cursor `json:"cursor"`
}

type PGPKeyUpdate struct {
	Created            time.Time     `json:"created"`
	DeliveryID         string        `json:"deliveryID"`
	Event              WebhookEvent  `json:"event"`
	RequestBody        string        `json:"requestBody"`
	RequestHeaders     []*HTTPHeader `json:"requestHeaders"`
	ResponseBody       *string       `json:"responseBody"`
	ResponseHeaders    []*HTTPHeader `json:"responseHeaders"`
	ResponseStatusCode *int          `json:"responseStatusCode"`
	ResponseStatusText *string       `json:"responseStatusText"`
	Subscription       *Webhook      `json:"subscription"`
	Key                *SSHKey       `json:"key"`
	Kind               *UpdateKind   `json:"kind"`
}

func (PGPKeyUpdate) IsWebhookDelivery() {}
func (PGPKeyUpdate) IsWebhookPayload()  {}

type ProfileUpdate struct {
	Created            time.Time     `json:"created"`
	DeliveryID         string        `json:"deliveryID"`
	Event              WebhookEvent  `json:"event"`
	RequestBody        string        `json:"requestBody"`
	RequestHeaders     []*HTTPHeader `json:"requestHeaders"`
	ResponseBody       *string       `json:"responseBody"`
	ResponseHeaders    []*HTTPHeader `json:"responseHeaders"`
	ResponseStatusCode *int          `json:"responseStatusCode"`
	ResponseStatusText *string       `json:"responseStatusText"`
	Subscription       *Webhook      `json:"subscription"`
	Old                *User         `json:"old"`
	New                *User         `json:"new"`
}

func (ProfileUpdate) IsWebhookDelivery() {}
func (ProfileUpdate) IsWebhookPayload()  {}

type SSHKeyCursor struct {
	Results []*SSHKey     `json:"results"`
	Cursor  *model.Cursor `json:"cursor"`
}

type SSHKeyUpdate struct {
	Created            time.Time     `json:"created"`
	DeliveryID         string        `json:"deliveryID"`
	Event              WebhookEvent  `json:"event"`
	RequestBody        string        `json:"requestBody"`
	RequestHeaders     []*HTTPHeader `json:"requestHeaders"`
	ResponseBody       *string       `json:"responseBody"`
	ResponseHeaders    []*HTTPHeader `json:"responseHeaders"`
	ResponseStatusCode *int          `json:"responseStatusCode"`
	ResponseStatusText *string       `json:"responseStatusText"`
	Subscription       *Webhook      `json:"subscription"`
	Key                *SSHKey       `json:"key"`
	Kind               *UpdateKind   `json:"kind"`
}

func (SSHKeyUpdate) IsWebhookDelivery() {}
func (SSHKeyUpdate) IsWebhookPayload()  {}

type Version struct {
	Major           int        `json:"major"`
	Minor           int        `json:"minor"`
	Patch           int        `json:"patch"`
	DeprecationDate *time.Time `json:"deprecationDate"`
}

type Webhook struct {
	ID         string                 `json:"id"`
	Created    time.Time              `json:"created"`
	Payload    string                 `json:"payload"`
	Deliveries *WebhookDeliveryCursor `json:"deliveries"`
}

type WebhookCursor struct {
	Results []*Webhook    `json:"results"`
	Cursor  *model.Cursor `json:"cursor"`
}

type WebhookDeliveryCursor struct {
	Results []WebhookDelivery `json:"results"`
	Cursor  *model.Cursor     `json:"cursor"`
}

type WebhookInput struct {
	Events  []*WebhookEvent `json:"events"`
	URL     string          `json:"url"`
	Payload string          `json:"payload"`
	Retry   *bool           `json:"retry"`
}

type AccessKind string

const (
	AccessKindRo AccessKind = "RO"
	AccessKindRw AccessKind = "RW"
)

var AllAccessKind = []AccessKind{
	AccessKindRo,
	AccessKindRw,
}

func (e AccessKind) IsValid() bool {
	switch e {
	case AccessKindRo, AccessKindRw:
		return true
	}
	return false
}

func (e AccessKind) String() string {
	return string(e)
}

func (e *AccessKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccessKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccessKind", str)
	}
	return nil
}

func (e AccessKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AccessScope string

const (
	AccessScopeAuditLog AccessScope = "AUDIT_LOG"
	AccessScopeBilling  AccessScope = "BILLING"
	AccessScopePGPKeys  AccessScope = "PGP_KEYS"
	AccessScopeSSHKeys  AccessScope = "SSH_KEYS"
	AccessScopeProfile  AccessScope = "PROFILE"
)

var AllAccessScope = []AccessScope{
	AccessScopeAuditLog,
	AccessScopeBilling,
	AccessScopePGPKeys,
	AccessScopeSSHKeys,
	AccessScopeProfile,
}

func (e AccessScope) IsValid() bool {
	switch e {
	case AccessScopeAuditLog, AccessScopeBilling, AccessScopePGPKeys, AccessScopeSSHKeys, AccessScopeProfile:
		return true
	}
	return false
}

func (e AccessScope) String() string {
	return string(e)
}

func (e *AccessScope) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccessScope(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccessScope", str)
	}
	return nil
}

func (e AccessScope) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UpdateKind string

const (
	UpdateKindObjectAdded   UpdateKind = "OBJECT_ADDED"
	UpdateKindObjectRemoved UpdateKind = "OBJECT_REMOVED"
)

var AllUpdateKind = []UpdateKind{
	UpdateKindObjectAdded,
	UpdateKindObjectRemoved,
}

func (e UpdateKind) IsValid() bool {
	switch e {
	case UpdateKindObjectAdded, UpdateKindObjectRemoved:
		return true
	}
	return false
}

func (e UpdateKind) String() string {
	return string(e)
}

func (e *UpdateKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UpdateKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UpdateKind", str)
	}
	return nil
}

func (e UpdateKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserType string

const (
	UserTypeUnconfirmed      UserType = "UNCONFIRMED"
	UserTypeActiveNonPaying  UserType = "ACTIVE_NON_PAYING"
	UserTypeActiveFree       UserType = "ACTIVE_FREE"
	UserTypeActivePaying     UserType = "ACTIVE_PAYING"
	UserTypeActiveDelinquent UserType = "ACTIVE_DELINQUENT"
	UserTypeAdmin            UserType = "ADMIN"
	UserTypeSuspended        UserType = "SUSPENDED"
)

var AllUserType = []UserType{
	UserTypeUnconfirmed,
	UserTypeActiveNonPaying,
	UserTypeActiveFree,
	UserTypeActivePaying,
	UserTypeActiveDelinquent,
	UserTypeAdmin,
	UserTypeSuspended,
}

func (e UserType) IsValid() bool {
	switch e {
	case UserTypeUnconfirmed, UserTypeActiveNonPaying, UserTypeActiveFree, UserTypeActivePaying, UserTypeActiveDelinquent, UserTypeAdmin, UserTypeSuspended:
		return true
	}
	return false
}

func (e UserType) String() string {
	return string(e)
}

func (e *UserType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserType", str)
	}
	return nil
}

func (e UserType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WebhookEvent string

const (
	WebhookEventProfileUpdate WebhookEvent = "PROFILE_UPDATE"
	WebhookEventSSHKeyUpdate  WebhookEvent = "SSH_KEY_UPDATE"
	WebhookEventPGPKeyUpdate  WebhookEvent = "PGP_KEY_UPDATE"
)

var AllWebhookEvent = []WebhookEvent{
	WebhookEventProfileUpdate,
	WebhookEventSSHKeyUpdate,
	WebhookEventPGPKeyUpdate,
}

func (e WebhookEvent) IsValid() bool {
	switch e {
	case WebhookEventProfileUpdate, WebhookEventSSHKeyUpdate, WebhookEventPGPKeyUpdate:
		return true
	}
	return false
}

func (e WebhookEvent) String() string {
	return string(e)
}

func (e *WebhookEvent) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WebhookEvent(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WebhookEvent", str)
	}
	return nil
}

func (e WebhookEvent) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
