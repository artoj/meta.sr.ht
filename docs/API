                                   meta.sr.ht

meta.sr.ht is a metaservice, and therefore is the most confusing part of the
sr.ht ecosystem. It has ownership over user accounts in the sr.ht ecosystem, and
is a central service provider for many features common to related services. The
API provides:

- Account information
- OAuth support
- Webhook dispatching

Account information is the least "meta" part of meta.sr.ht. Through it you can
access most of the information the user maintains on the meta.sr.ht web
interface, such as their profile information, public keys, etc.

OAuth support and webhook dispatching, however, are designed not just to service
the meta.sr.ht API, but provide access to other service providers that integrate
with sr.ht. Some basic terminology is necessary:

    client      A registered OAuth client of meta.sr.ht
    provider    A client that also provides services for other clients

On a provider's behalf, meta.sr.ht can offer authentication and account related
services, as well as delivery of webhooks to other clients. Additionally,
providers are encouraged to design their API in a similar way to the meta.sr.ht
API, but are not required to.

                                 AUTHENTICATION

Authentication with meta.sr.ht allows you to access the meta.sr.ht API, and the
APIs of providers in the sr.ht ecosystem. It's done through a system very
similar to OAuth, but modified to allow for some meta-ness.

Each OAuth client has a client ID and client secret. You can obtain these for
your own clients at https://meta.sr.ht/oauth. As the name implies, the client
secret is to be kept a secret. A high-level summary of the OAuth process is
provided:

1. Direct users to the authorization page (documented below) with a web browser.
2. The user enters their login details on meta.sr.ht and is presented with
   information about your request. They may then choose to approve your request
   to access their account.
3. We return the user to the URL of your choosing, and in the query string
   include an "exchange token".
4. From your application, you submit the exchange token, along with your client
   ID and client secret, to our exchange endpoint (documented below).
5. We issue you an "OAuth token", which you include with API requests to
   authenticate.

SCOPES

When you authenticate via OAuth, you request a list of "OAuth scopes" you would
like to use. Each scope grants you access to a different subset of the API.
meta.sr.ht is slightly different from most OAuth implementations here in that it
also grants scopes on behalf of third party APIs. When you send the user to the
authorization page, you pass along a list of scopes you want. The format of a
scope is:

    client_id/scope:access

The client_id is the client ID of the provider that offers this scope. The scope
is the name of the scope, and access is the level of access. Valid options for
scope vary depending on the scopes offered by that provider. Valid options for
access are "read" and "write", the latter implies the former.

client_id and access are optional - they default to "meta.sr.ht" and "read"
respectively.

A number of aliases for first-party client IDs are supported, so you don't have
to look them up. Available aliases are:

- meta.sr.ht
- git.sr.ht

More may be added later. meta.sr.ht does not, in fact, actually have a client
ID. Presently, there is no way to list scopes available for a provider - consult
that provider's own API documentation.

AUTHORIZATION PAGE

In a web browser, direct your users to this page:

    https://meta.sr.ht/oauth/authorize?[args...]

In the query string, you may include the following information:

    client_id       required    Your client ID
    scopes          required    Comma-delimited list of OAuth scopes you need
    redirect_uri    optional    Where to direct the user upon authorization
    state           optional    An arbitrary token (see below)

redirect_uri must begin with the same characters as the "Redirect URI" option in
your OAuth application configuration.

state is an arbitrary token you may choose to generate in your application
before redirecting the user to the authorization page. We will include this
token in the redirect back to your application, and you may use it to identify
the user or determine if the OAuth flow originated from you (as opposed to
someone else directing a user to the authorization page with your client ID), or
for any other use you can think of.

REDIRECT

On the authorization page, the user may agree to authorize your request. When
they decide, we will redirect them back to your redirect_uri (or the default set
for your OAuth client). In the query string, we will include:

    exchange    Your exchange token
    scopes      OAuth scopes the user has agreed to give you
    state       The state token you provided before, if present

Design your applications to support allowing the user to return different scopes
than the ones you asked for. A good practice is to ask for a minimal number of
OAuth scopes at first, and then direct the user back to the authorization page
to elevate your permissions as they ask your application to do tasks that
require it.

TOKEN EXCHANGE

Take the token from the query string we redirected to, and use it to perform the
following HTTP request:

POST /oauth/exchange
    Exchanges an exchange token for an OAuth token.

    {
      "client_id": "string",        Your client ID
      "client_secret": "string",    Your client secret
      "exchange": "string"          The exchange token
    }

    Response:

    {
      "token": "string",            Your new OAuth token
      "expires": "datetime",
    }

In further requests you may include the following HTTP header to authenticate:

    Authorization: token <token>

Where <token> is your OAuth token. For example:

    Authorization: token 215ec72a2546bf09040b4b7ee67010125ddf847653c1dc40

Note that notifying third-party providers is done asyncronously and you may not
be able to immediately make API requests with the new token.

                                 META.SR.HT API

In addition to being a meta-API, meta.sr.ht is a traditional API too. Through
this API you can work with user information, oauth clients, webhooks, etc.

                                 REQUEST FORMAT

Submit HTTP requests with the appropriate HTTP method as documented by the
endpoint (i.e. GET, POST, PUT). If you are asked to provide a request body,
encode it as application/json. Response bodies will be application/json and the
HTTP status code indicates the result of your request. Errors (4xx or 5xx HTTP
status codes) use the following format:

    {
      "errors": [                   An array of errors that occured
        {
          "field": "string",        The name of the field that caused the error.
                                    (optional)
          "code": "string",         A computer-friendly error code.
          "reason": "string"        A human-friendly error string.
        }
      ]
    }

Successful responses (2xx HTTP status codes) will use the response format
described in each endpoint's documentation. The following headers will be
included in responses:

    X-OAuth-Required            OAuth scope necessary to use this endpoint
    X-OAuth-Scopes              OAuth scopes your token is granted

In all requests, please set the User-Agent header to something unique, and
include some means for us to contact you. For example:

    User-Agent: Example application - https://example.org - admin@example.org

                                     TYPES

All standard JSON types (string, number, boolean, array, object, null) are
supported. Additionally, "datetime"s are supported by wrapping an ISO 8601
formatted datetime in a string (in UTC).

                                 API ENDPOINTS

USER INFO

GET /api/user/profile
    Scopes: profile:read
    Gets the user's profile information (i.e. the details you can edit on
    meta.sr.ht/profile)

    Response:

    {
      "username": "string",
      "email": "string",
      "url": "string",
      "location": "string",
      "bio": "string"
    }

GET /api/user/audit-log
    Scopes: audit:read
    Returns a user's audit log.

    Query string:
        start    ID of first record to retreive

    Response:

    {
      "next": number,           ID of record following the last result
      "results": [
        {
          "id": number,
          "ip": "string",
          "action": "string",
          "details": "string",
          "created": "datetime"
        },
        ...
      ]
    }

GET /api/user/ssh-keys
    Scopes: keys:read
    Returns a user's SSH keys.

    Query string:
        start    ID of first record to retreive

    Response:

    {
      "next": number,
      "results": [
        {
          "id": number,
          "name": "string",
          "fingerprint": "string",
          "authorized": "datetime",
          "last_used": "datetime"
        },
        ...
      ]
    }

GET /api/keys/pgp
    Scopes: keys:read
    Returns a user's PGP keys.

    Query string:
        start    ID of first record to retreive

    Response:

    {
      "next": number,
      "results": [
        {
          "id": number,
          "email": "string",
          "key_id": "string",
          "authorized": "datetime"
        },
        ...
      ]
    }

WEBHOOKS

todo
