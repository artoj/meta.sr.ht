#!/usr/bin/env python3
import sys
import os

from getopt import getopt, GetoptError
from getpass import getpass
from metasrht.auth import hash_password
from metasrht.blueprints import auth
from metasrht.types import User
from srht.config import cfg
from srht.database import DbSession
from srht.validation import Validation
from srht.oauth import UserType

USER_TYPES = [x.value for x in UserType]


def print_usage():
    print("Usage:")
    print("    metasrht-createuser [-t] <username> <email>")
    print("Options:")
    print("    -t <user_type>")
    print("    -s read initial password from stdin")

def get_args():
    try:
        opts, args = getopt(sys.argv[1:], "t:s")
    except GetoptError as ex:
        print(ex, file=sys.stderr)
        print_usage()
        sys.exit(1)

    if len(args) != 2:
        print("Invalid argument count", file=sys.stderr)
        print_usage()
        sys.exit(1)

    username, email = args

    user_types = [y for x, y in opts if x == "-t"]
    user_type = user_types[0] if user_types else None
    if user_type and user_type not in USER_TYPES:
        sys.exit(f"-t must be one of {USER_TYPES}")

    stdin = ("-s", "") in opts

    return username, email, user_type, stdin

def get_password(stdin):
    if not stdin:
        password1 = getpass("Enter password: ")
        password2 = getpass("Repeat password: ")

        if password1 != password2:
            sys.exit("Repeated password does not match")

        return password1
    else:
        return sys.stdin.readline().rstrip(os.linesep)

def error_on_invalid(valid):
    if not valid.ok:
        for error in valid.errors:
            print(error.message, file=sys.stderr)
        sys.exit(1)

def validate_user(username, email):
    valid = Validation({})
    auth.validate_username(valid, username)
    auth.validate_email(valid, email)
    error_on_invalid(valid)

def validate_password(password):
    valid = Validation({})
    auth.validate_password(valid, password)
    error_on_invalid(valid)

def create(username, email, password, user_type):
    db = DbSession(cfg("meta.sr.ht", "connection-string"))
    db.init()

    user = User(username)
    user.email = email
    user.password = hash_password(password)
    user.invites = cfg("meta.sr.ht::settings", "user-invites", default=0)

    if user_type:
        user.user_type = UserType[user_type]

    db.session.add(user)
    db.session.commit()

    return user


if __name__ == '__main__':
    username, email, user_type, stdin = get_args()
    validate_user(username, email)

    password = get_password(stdin)
    validate_password(password)

    user = create(username, email, password, user_type)
    print(f"User created: {user}")
